//******************************************************************************
// Laird Technologies (c) 2014
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//
//	smartZ.manager
//
//
//	This app provides for a command interface to the BT900 devkit over the UART. The
// 	commands are designed to mimic the behaviour of BlueZ commands used in Linux.
//
//	When you run the app you will get a -------> command prompt to allow you to submit
//	commands as follows:- 
//
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//		hcitool dev 		Display local devices
//		hcitool inq 		Inquire remote devices
//		hcitool scan		Scan for remote devices
//		hcitool name		Get name from remote device
//		hcitool con 		Display active connections
//		hcitool pair		Pair with remote device
//		hcitool unpair  	Unpair from remote device
//		hcitool leadv		Start LE advertisement
//		hcitool noleadv		Stop LE advertisement
//		hcitool lescan      Start LE scan
//		hcitool lecc        Create a LE Connection
//		hcitool ledc        Disconnect a LE Connection
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//		rfcomm connect <bdaddr>
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//		gatttool 
//		gatttool --primary        	Primary Service Discovery
//		gatttool --characteristics	Characteristics Discovery
//		gatttool --char-read      	Characteristics Value/Descriptor Read
//		gatttool --char-write    	Characteristics Value Write Without Response
//		gatttool --char-desc     	Characteristics Descriptor Discovery
//		gatttool --listen        	Listen for notifications and indications
//
//		Options:
//		-b, --device=MAC	Specify remote Bluetooth address
//		-l, --sec-level		Set security level. Default: low
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//		hciconfig auth  				Enable Authentication
//		hciconfig noauth				Disable Authentication
//		hciconfig piscan				Enable Page and Inquiry scan
//		hciconfig noscan				Disable scan
//		hciconfig iscan 				Enable Inquiry scan
//		hciconfig pscan 				Enable Page scan
//		hciconfig name   	[name]		Get/Set local name
//		hciconfig inqmode	[mode]		Get/Set inquiry mode
//		hciconfig inqtype	[type]		Get/Set inquiry scan type
//		hciconfig inqtpl	[level]		Get/Set inquiry transmit power level
//		hciconfig letpl		[level]		Get/Set LE transmit power level
//		hciconfig putkey	<bdaddr>	Store link key on the device
//		hciconfig delkey	<bdaddr>	Delete link key from the device
//		hciconfig version				Display version information
//		hciconfig leadv  				Enable LE advertising
//		hciconfig noleadv				Disable LE advertising
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//******************************************************************************
// Definitions
//******************************************************************************

        // Number of connections
#define NUM_OF_CONNS                         8

// BLE EVENT MSG IDs
#define BLE_EVBLEMSGID_CONNECT                          0 // msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT                       1 // msgCtx = connection handle
#define BLE_EVBLEMSGID_SERVICE_ERROR                    4 // msgCtx = resultcode
#define BLE_EVBLEMSGID_DISPLAY_PASSKEY                  9 // msgCtx = passcode to display
#define BLE_EVBLEMSGID_NEW_BOND                        10 // msgCtx = connection handle
#define BLE_EVBLEMSGID_AUTH_KEY_REQUEST                11 // msgCtx = 1 for passkey, 2 for 16 byte OOB data

// #define FUTURE_USE                                   13
#define BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER           16 // msgCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND                    17 // msgCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                       18 // msgCtx = connection handle
#define BLE_EVBLEMSGID_POWER_FAILURE_WARNING           19 // msgCtx = current supply voltage
#define BLE_EVBLEMSGID_UNENCRYPTED                     20 // msgCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE                21 // msgCtx = connection handle 

// SMARTZ COMMAND IDs: HCITOOL
#define SMARTZ_COMMAND_HCITOOL_DEV						1
#define SMARTZ_COMMAND_HCITOOL_INQ						2
#define SMARTZ_COMMAND_HCITOOL_SCAN						3
#define SMARTZ_COMMAND_HCITOOL_NAME						4
#define SMARTZ_COMMAND_HCITOOL_CON						5
#define SMARTZ_COMMAND_HCITOOL_PAIR						6
#define SMARTZ_COMMAND_HCITOOL_UNPAIR					7
#define SMARTZ_COMMAND_HCITOOL_LESCAN					8
#define SMARTZ_COMMAND_HCITOOL_LEADV					9
#define SMARTZ_COMMAND_HCITOOL_LENOADV					10
#define SMARTZ_COMMAND_HCITOOL_LECC						11
#define SMARTZ_COMMAND_HCITOOL_LEDC						12

// SMARTZ COMMAND IDs: GATTTOOL
#define SMARTZ_COMMAND_GATTTOOL_PRIMARY					21
#define SMARTZ_COMMAND_GATTTOOL_CHARACTERISTICS			22
#define SMARTZ_COMMAND_GATTTOOL_CHAR_READ				23
#define SMARTZ_COMMAND_GATTTOOL_CHAR_WRITE				24
#define SMARTZ_COMMAND_GATTTOOL_CHAR_DESC				25
#define SMARTZ_COMMAND_GATTTOOL_LISTEN					26

// SMARTZ COMMAND IDs: RFCOMM
#define SMARTZ_COMMAND_RFCOMM_CONNECT					31

// APP RUN MODES
#define NORMAL_MODE                                 	0
#define RFCOMM_MODE                          			1
#define GATTTOOL_LISTEN									2

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim rc
dim stRsp$ 			        	//Uart rx data is stored here
dim ok$,er$,pr$
dim urtcmd$                 	// cmd line from uart
dim tkn$,tlen               	// used by command parser
dim hc[NUM_OF_CONNS+1]      	// contains connection handles
dim conns                   	// number of connections
dim name$						// local device name
dim addr$						// address of device being connected to

dim prAddr$              		// BT address of last device pairing requested from or initiated with
dim hcSpp                   	// handle of connection to use for VSP service

dim command : command = 0		// Currently active smartZ command
dim nDiscv : nDiscv = 1			// The device is discoverable by default
dim nConn : nConn = 1 			// The device is connectable by default
dim nPair : nPair = 1			// The device is pairable by default					
dim inqtype	: inqtype = 0		// Inquiry Type: 0 General, 1 Limited
dim inqmode	: inqmode = 2		// Inquiry Mode: 0 for Standard, 1 for with RSSI, 2 for Extended)
dim inqtpl : inqtpl=4			// Inquiry transmit power level
dim letpl : letpl = 4			// LE Tx Power level in dBm
dim gattLsn : gattLsn = 0		// If Lsn = 1, notifications will be shown

dim mjVersion : mjVersion=1		// Major version number
dim mnVersion : mnVersion=0	// Minor version number
dim conHdl						// global connection handle of the current connection being serviced
dim chrHdl						// global characteristic handle of the current characteristic being serviced
dim valHdl						// global characteristic value handle of the current characteristic value handle being serviced

dim carCnt                  	//count variable for number of times '^' entered
dim secPair						// If 1, it means sec-level is medium or high and therefore should pair

//******************************************************************************
// Initialise Global Variable
//******************************************************************************

ok$    = "\nOK"
er$    = "\nERROR "
pr$    = "------->"

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
//==============================================================================
sub AssertResCode(resCode)
	if rc !=0 then
		print "error: ";integer.h' rc;"\n"
	endif
endsub 
//==============================================================================
//==============================================================================
sub delay(t as integer)

		t = t*1000
		DIM tm
		tm = gettickcount()
		while (gettickcount()-tm) < t
			//wait for t*1000 milliseconds
		endwhile
		
endsub
//==============================================================================
// Initialise all connection handles
//==============================================================================
sub InitConnHandles()

	dim z
	for z=0 to (NUM_OF_CONNS)
		hc[z]=-1
	next

endsub
//==============================================================================
// Add the connection handle to the list of connection handles
//==============================================================================
function AcqConnHandle(hConn)

	dim z
	for z=1 to (NUM_OF_CONNS)
		if hc[z] == -1 then
			hc[z]=hConn
			exitfunc z
		endif
	next

endfunc 0
//==============================================================================
// Release the connection handle from the array of conn handles
//==============================================================================
function RelConnHandle(hConn)

	dim z
	for z=1 to (NUM_OF_CONNS)
		if hc[z] == hConn then 
			hc[z]=-1
			exitfunc z
		endif
	next

endfunc 0

//------------------------------------------------------------------------------
//** #include the correct library file for the smartBASIC module being used 
//------------------------------------------------------------------------------
#include "lib\smartZ.hcitool.sblib"
#include "lib\smartZ.gatttool.sblib"
#include "lib\smartZ.rfcomm.sblib"
#include "lib\smartZ.hciconfig.sblib"

//==============================================================================
// Initialise the Bluetooth device
// Set the device to be disoverable, connectable, pairable, 
// Set the inquiry type to be general, inquiry mode to be extended
//==============================================================================
sub InitBtDevice()

	dim nHandle
	
	// Set the name of the local Bluetooth device
	name$ = SYSINFO$(4)
	name$ = right$(name$, 6)
	name$ = StrHexize$(name$)
	name$ = "smartZ-" + name$
	rc = BTCSETFRIENDLYNAME (name$)
	AssertResCode(rc)

	// Configure classic BT radio
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Set device is discoverable with 300s discoverability timeout
	rc = BtcSetDiscoverable(1, 300)
	AssertResCode(rc)
	// Set device to be connectable
	rc = BtcSetConnectable(1)
	AssertResCode(rc)
	// Set the device to be pairable
	rc = BtcSetPairable(1)
	AssertResCode(rc)															
	// Set inquiry type to be general
	rc = BtcInquiryConfig(0, inqtype)
	AssertResCode(rc)
	// Set inquiry mode to be extended
	rc = BtcInquiryConfig(1, inqmode)
	AssertResCode(rc)
	// Open Spp
	rc = btcSppOpen(nHandle)


endsub											
//==============================================================================
// Print the Help menu
//==============================================================================
sub _help()

	print "Available Commands: \n\n"
	print "	help\n"
	print "	hcitool\n"
	print "	gatttool\n"
	print "	rfcomm\n"
	print "	hciconfig\n"
	print "	quit/exit\n"
	print "\n"
	print "For more information on the usage of each command use:\n"
	print "<command> --help\n\n"

endsub
//==============================================================================
// Extract the received Uart command
//==============================================================================
function OnUartCmd() as integer

	// get first token
	tlen = ExtractStrToken(urtcmd$,tkn$) 

	if strcmp(tkn$,"hcitool")==0 then
		_hci()

    elseif strcmp(tkn$,"gatttool")==0 then
		_gatt()

	elseif strcmp(tkn$,"hciconfig")==0 then
		_hciCfg()

	elseif strcmp(tkn$, "rfcomm")==0 then
		_rfcomm()

	elseif strcmp(tkn$, "help")==0 then
		_help()

	elseif strcmp(tkn$,"exit")==0 || strcmp(tkn$,"quit")==0  then
		reset(0)

	elseif strcmp(tkn$,"")==0 then
		//received carriage return. Do nothing

	else
		print tkn$;": command not found\n"
	endif

	print pr$

endfunc 1

//==============================================================================
// This handler is called when data has arrived at the serial port
//==============================================================================
function HandlerUartRxCmd() as integer

	dim nMatch

	nMatch=UartReadMatch(stRsp$,13)
	if nMatch!=0 then
		//CR exists in the input buffer
		urtcmd$ = strsplitleft$(stRsp$, nMatch)
		exitfunc OnUartCmd()
	endif

endfunc 1
'//==============================================================================
'// Called after SendMsgApp is called. Used to switch between command and bridge mode
'//==============================================================================
function SetMode(msgID, cmd) as integer

	if cmd == NORMAL_MODE then
		OnEvent	 EVUARTRX					call HandlerUartRxCmd
		carCnt=0

	elseif cmd == RFCOMM_MODE then
		OnEvent	EVUARTRX					call HandlerUartRxSpp

	elseif cmd == GATTTOOL_LISTEN then	
		print "\nListening for notifications/indications. For hangup, type \22stop\22\n"
		OnEvent	EVUARTRX					call HandlerUartRxLsn

	endif

endfunc 1
//******************************************************************************

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
// uart related events
OnEvent  EVUARTRX					call HandlerUartRxCmd

// Called for rfcomm connect and hangup
OnEvent  EVMSGAPP                 call SetMode

//==============================================================================
//==============================================================================
sub Initialise()
	InitBtDevice()
	InitConnHandles()
	
	print "\n-----------------------\n"
	print " smartZ v";mjVersion;".";mnVersion;"\n"
	print "-----------------------\n"
	print "\nType \22help\22 or \22<command> help\22\n"
	print pr$
	
endsub
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Initialise()

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WaitEvent