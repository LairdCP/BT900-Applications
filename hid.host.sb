// Copyright (c) 2014, Laird
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//

//******************************************************************************
// Modules
//******************************************************************************
#define MODULE_BTC        (0x01)
#define MODULE_INQ        (0x02)
#define MODULE_TEST        (0x04)

//Module selection
#set $cmpif,(0x01)

//******************************************************************************
// Definitions
//******************************************************************************

//Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS                 1

//Number of connections
#define NUM_OF_CONNS                        8

//Size of i[]
#define NUM_OF_I_PARAMS                     (10)
//Size of s$[]
#define NUM_OF_S_PARAMS                     (10)


//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n OnErr - ";GetLastError();"\n"
  endif
endsub
onerror next HandlerOnErr

//******************************************************************************
// Debugging resource as early as possible
//******************************************************************************

//==============================================================================
//==============================================================================
sub AssertResCode(byval rc as integer,byval tag as integer)
  if (ENABLE_DEBUG_PRINTS!=0) && (rc!=0) then
    print "\nFailed with ";integer.h' rc;" at tag ";tag
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsg(byval msg$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsgVal(byval msg$ as string, byval vl as integer)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$;" ";vl
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgPrnAdvReport(byref rp$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\nRpt=";strhexize$(rp$)
  endif
endsub



//******************************************************************************
// Debugging resource after libs
//******************************************************************************

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

//Generic return code
dim rc

//Error and return strings
dim ok$,er$,pr$,uc$

//Used for Uart command parsing
dim stRsp$                 //Uart rx data is stored here
dim urtcmd$                //CMD line from uart
dim tkn$,tlen              //Used by command parser
dim i[NUM_OF_I_PARAMS]     //Index 0 used for return values
dim s$[NUM_OF_S_PARAMS]    //Index 0 used for return string

//Connection handles
dim hc[NUM_OF_CONNS+1]     //Contains connection handles

//******************************************************************************
// Initialise Global Variable
//******************************************************************************

ok$    = "\nOK"
er$    = "\nERROR "
pr$    = "\r\n>"
uc$    = "\nUNKNOWN COMMAND"

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
//==============================================================================
function ClearS()
  dim j
  for j = 0 to (NUM_OF_S_PARAMS-1)
    s$[j]=""
  next
endfunc 0

//==============================================================================
//==============================================================================
function ClearI()
  dim j
  for j = 0 to (NUM_OF_I_PARAMS-1)
    i[j]=0
  next
endfunc 0

//==============================================================================
//Release all connection handles
//==============================================================================
sub InitConnHandles()
  dim z
  for z=0 to (NUM_OF_CONNS)
    hc[z]=-1
  next
endsub

//==============================================================================
//==============================================================================
function AcqConnHandle(hConn)
  dim z
  for z=1 to (NUM_OF_CONNS)
    if hc[z] == -1 then
      hc[z]=hConn
      exitfunc z
    endif
  next
endfunc 0

//==============================================================================
//==============================================================================
function RelConnHandle(hConn)
  dim z
  for z=1 to (NUM_OF_CONNS)
    if hc[z] == hConn then
      hc[z]=-1
      exitfunc z
    endif
  next
endfunc 0

//==============================================================================
//==============================================================================
function GetConnHandle(hConn)
  dim z
  for z=1 to (NUM_OF_CONNS)
    if hc[z] == hConn then
      exitfunc z
    endif
  next
endfunc 0

//==============================================================================
#define UARTRESP_OK_PR                        (0)
#define UARTRESP_PR                           (-2)
#define UARTRESP_UC_PR                        (-4)
//==============================================================================
sub UartRsp(rsp as integer)
    if rsp == UARTRESP_OK_PR then
        print ok$;pr$
    elseif rsp == UARTRESP_PR then
        print pr$
    elseif rsp == UARTRESP_UC_PR then
        print uc$;pr$
    elseif rsp > 0 then
        print er$;integer.h' rsp;pr$
    endif
endsub

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
function ExtractIntTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractIntToken(u$,i[stIdx])
    if tlen == 0 then
      exitfunc 4
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
function ExtractStrTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractStrToken(u$,s$[stIdx])
    if tlen == 0 then
      exitfunc 3
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
sub ProcessCmd()
    rc = SendMsgApp(0,0)
    waitevent
endsub


//******************************************************************************
// Library Import
//******************************************************************************
//------------------------------------------------------------------------------
//** #include the correct library file for the smartBASIC module being used
//------------------------------------------------------------------------------
#include "lib\mouse.module.sblib"

#include "lib\btc.module.sblib"     //BTC module for pairing and connectable / discoverable
#include "lib\inq.module.sblib"     //INQ module for classic inquiries
#include "lib\hid.module.sblib"     //HID module for HID connections and data

//==============================================================================
//==============================================================================
function OnUartCmd() as integer
  rc=UARTRESP_PR //Default response is ">"
  tlen = ExtractStrToken(urtcmd$,tkn$) //Get first token
  if tlen > 0 then

    if strcmp(tkn$,"exit")==0 || strcmp(tkn$,"quit")==0  then
      Reset(0)

    elseif strcmp(tkn$,"inquiry")==0 then
        rc = _inquiry()

    elseif strcmp(tkn$,"hid")==0 then
        rc = _hid()

    elseif strcmp(tkn$,"btc")==0 then
        rc = _btc()

    elseif strcmp(tkn$,"mouse")==0 then
        rc = _mouse()

    else
        rc=UARTRESP_UC_PR //Send an "UNKNOWN COMMAND" response to user

    endif
  endif
  //Send a response back to the user
  exitfunc rc
endfunc 1

//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when data has arrived at the serial port
//==============================================================================
function HandlerUartRxCmd() as integer
  dim nMatch

  //Check if CR has been received
  nMatch=UartReadMatch(stRsp$,13)
  if nMatch!=0 then
    //CR exists in the input buffer
    urtcmd$ = strsplitleft$(stRsp$,nMatch)
    rc = OnUartCmd()
    UartRsp(rc)
  endif
endfunc 1

//==============================================================================
// This handler is used to bodge sending commands in
//==============================================================================
function HandlerMsgApp(nMsgId, nMsgCtx)
   rc = OnUartCmd()
endfunc 0


//******************************************************************************
//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVUARTRX   call HandlerUartRxCmd
OnEvent  EVMSGAPP   call HandlerMsgApp

//------------------------------------------------------------------------------
// Initialise and then wait for events
//------------------------------------------------------------------------------

//==============================================================================
//==============================================================================
sub Initialise()
  InitConnHandles()
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Initialise()

//Send user prompt for uart based command interface
print "\n\rLAIRD HID Host\n\r"
//Send an OK response
UartRsp(UARTRESP_OK_PR)

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WaitEvent
