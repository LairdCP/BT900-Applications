
//-------------------------------------------------------------------------
// hcitool inq [--length=N] [--numrsp=N]
//-------------------------------------------------------------------------
function _hciInq()  

	DIM inqLen : inqLen = 10
	DIM numRsp : numRsp = 50
	
'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// print the inquiry help menu
			print "Usage:\n"
			print "		hcitool inq	[--length=t] maximum inquiry duration in seconds\n"
			print " 				[--numrsp=N] specify maximum number of inquiry responses\n"
			exitfunc 1

		elseif strcmp(tkn$,"length")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,inqLen)			//extract the integer value of the string	

		elseif strcmp(tkn$,"numrsp")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,numRsp)			//extract the integer value of the string

		endif
	endwhile
'--------------------------------------'

	print "Inquiring ...\n"
	// specify maximum number of responses
	rc = btcInquiryConfig(2, numRsp)
	AssertResCode(rc)
	// start inquiry
	rc =  btcinquirystart(inqLen)
	AssertResCode(rc)

endfunc 1
//-------------------------------------------------------------------------
// hcitool scan [--length=N] [--numrsp=N]
//-------------------------------------------------------------------------
function _hciScan()

	DIM inqLen : inqLen = 10
	DIM numRsp : numRsp = 50

'--- Extract all strings in command ---'
'--------------------------------------'	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// print the scan help menu
			print "Usage:\n"
			print "		hcitool scan [--length=t] maximum inquiry duration in seconds\n"
			print " 				 [--numrsp=N] specify maximum number of inquiry responses\n"
			exitfunc 1

		elseif strcmp(tkn$,"length")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,inqLen)			//extract the integer value of the string	

		elseif strcmp(tkn$,"numrsp")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,numRsp)			//extract the integer value of the string

		endif
	endwhile
'--------------------------------------'	
	
	print "Scanning ...\n"
	// specify maximum number of responses
	rc = btcInquiryConfig(2, numRsp)
	AssertResCode(rc)
	// start inquiry
	rc =  btcinquirystart(inqLen)
	AssertResCode(rc)

endfunc 1
//-------------------------------------------------------------------------
// hcitool name <bdaddr>
//-------------------------------------------------------------------------
function _hciName()

	DIM inqLen : inqLen = 10
	DIM numRsp : numRsp = 30
	DIM num_of_params : num_of_params = 0

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// print the name help menu
			print "Usage:\n"
			print "		hcitool name <bdaddr>\n"
			exitfunc 1

		else
			addr$ = strdehexize$(tkn$)
			num_of_params = num_of_params + 1

		endif
	endwhile
'--------------------------------------'

	if num_of_params != 1 then
		print "name: too few arguments (minimal: 1)\n"
		print "Usage:\n"
		print "		name <bdaddr>\n"
		exitfunc 1
	endif

	// specify maximum number of responses
	rc = btcInquiryConfig(2, numRsp)
	AssertResCode(rc)
	// start inquiry
	rc =  btcinquirystart(inqLen)
	AssertResCode(rc)

endfunc 1 	
//-------------------------------------------------------------------------
// hcitool dev
//-------------------------------------------------------------------------
function _hciDev()

	DIM str$

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the dev help menu
			print "Usage:\n"
			print "		hcitool dev\n"
			exitfunc 1
		endif
	endwhile
'--------------------------------------'

	str$ = SYSINFO$(4)
	str$ = right$(str$, 6)
	print "Device: \n	";name$;"    ";StrHexize$(str$);"\n"
		
endfunc 1
//-------------------------------------------------------------------------
// hcitool con
//-------------------------------------------------------------------------
function _hciCon()

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the con help menu
			print "Usage:\n"
			print "		hcitool con\n"
			exitfunc 1
		endif
	endwhile
'--------------------------------------'

	dim conAddr$, z

	print "Connections:\n"
	for z=1 to conns
		rc = BleGetAddrFromConnHandle(hc[z],conAddr$)
		if rc!=0 then
			rc = BtcGetBDAddrFromHandle(hc[z],conAddr$)
		endif
		print "	> ";strhexize$(conAddr$);" handle ";hc[z];"\n"
	next

endfunc 1 
//-------------------------------------------------------------------------
// hcitool pair <bdaddr>
//-------------------------------------------------------------------------
function _hciPair()

	DIM str$
	DIM nBnd : nBnd = 0

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the  hcitool pair help menu
			print "Usage:\n"
			print "		hcitool pair <bdaddr> [--bond]\n"
			exitfunc 1

		elseif strcmp(tkn$,"bond")==0 then
			nBnd = 1

		elseif strcmp(tkn$,"-")==0 then
			//do nothing
	
		else
			addr$ = tkn$

		endif
	endwhile
'--------------------------------------'

	addr$ = strdehexize$(addr$)
	rc = BtcPair(addr$, nBnd)
	AssertResCode(rc)
	if rc == 0 then 
		print "Pairing ...\n"
	endif
		
endfunc 1
//-------------------------------------------------------------------------
// hcitool unpair <bdaddr>
//-------------------------------------------------------------------------
function _hciUnpair()

	DIM str$

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the hcitool unpair help menu
			print "Usage:\n"
			print "		hcitool unpair <bdaddr>\n"
			exitfunc 1

		else
			addr$ = tkn$
		endif
	endwhile
'--------------------------------------'

	addr$ = strdehexize$(addr$)
	rc = BtcBondingEraseKey(addr$)
	AssertResCode(rc)
	if rc == 0 then 
		print "Unpaired\n"
	endif
		
endfunc 1
//-------------------------------------------------------------------------
// hcitool leadv	[--timeout]
//-------------------------------------------------------------------------
function _hciLeAdv()

	dim a$
	dim timOut	: timOut = 0

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		//print the leadv help menu
			print "Usage:\n"
			print "		hcitool leadv [--timeout=t] advert time-out in seconds\n"
			print ""
			exitfunc 1

		elseif strcmp(tkn$,"timeout")==0 then
		// modify the timeout variable
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,timOut)			//extract the integer value of the string

		endif
	endwhile
'--------------------------------------'					

	rc = BleAdvertStart(0,a$,25,timOut,0)
	AssertResCode(rc)
			
endfunc 1
//-------------------------------------------------------------------------
// hcitool noleadv
//-------------------------------------------------------------------------
function _hciNoLeAdv()

	dim a$
	dim timOut	: timOut = 0

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		//print the noleadv help menu
			print "Usage:\n"
			print "		hcitool noleadv\n"
			print ""
			exitfunc 1

		endif
	endwhile
'--------------------------------------'					

	rc = BleAdvertStop()
	AssertResCode(rc)

endfunc 1
//-------------------------------------------------------------------------
// hcitool lescan [--length]
//-------------------------------------------------------------------------
function _hciLeScan()

	dim scnLen : scnLen = 5000

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		// print the lescan help menu
			print "Usage:\n"
			print "		hcitool lescan [--length=N] maximum scan duration in seconds\n"
			print ""
			exitfunc 1

		elseif strcmp(tkn$,"length")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,scnLen)			//extract the integer value of the string
			scnLen = scnLen*1000

		endif
	endwhile
'--------------------------------------'

	rc = BleScanStart(scnLen, 0)
	AssertResCode(rc)
	if rc == 0 then 
		print "LE Scan ...\n"
	endif

endfunc 1
//-------------------------------------------------------------------------
// hcitool lecc [--random] <bdaddr>
//-------------------------------------------------------------------------
function _hciLeCc() as integer

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the hcitool lecc help menu
			print "Usage:\n"
			print "		hcitool lecc <bdaddr>\n"

			exitfunc 1

		else
			addr$ = tkn$

		endif
	endwhile
'--------------------------------------'

	addr$ = strdehexize$(addr$)
	rc = BleConnect(addr$, 5000, 20000, 75000, 5000000)						// ConnectionTimeoutms, minConIntervalus, maxConIntervalus, nSupervisionTimeoutus
	AssertResCode(rc)
	if rc == 0 then
		print "Connecting ... \n"
	endif

endfunc 1
//-------------------------------------------------------------------------
// hcitool ledc <handle>
//-------------------------------------------------------------------------
function _hciLeDc() as integer

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the hcitool ledc help menu
			print "Usage:\n"
			print "		hcitool ledc <handle>\n"

			exitfunc 1

		else
			conHdl = StrValDec(tkn$)

		endif
	endwhile
'--------------------------------------'

	// Do not store bonding information 
	rc = bledisconnect(conHdl)
	if rc == 0 then 
		print "Disconnecting ...\n"
	else	
		AssertResCode(rc)
	endif	

endfunc 1
//=========================================================================
//						RFCOMM
//=========================================================================
//-------------------------------------------------------------------------
// rfcomm connect <bdaddr> 
//-------------------------------------------------------------------------
function _rfcommConnect()

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		rfcomm connect <bdaddr>\n"
			exitfunc 1

		else
			if strcmp(tkn$,"")==0 then
				print "A valid Bluetooth address is required\n"
			else
				addr$ = tkn$
			endif
		endif
	endwhile
'--------------------------------------'

	addr$ = strdehexize$(addr$)
	rc = BtcSppConnect(addr$)
	AssertResCode(rc)
	if rc == 0 then
		print "Connecting ... \n"
	endif

endfunc 1 
//=========================================================================
//						GATTTOOL
//=========================================================================
function _gattSecLvl() as integer

	strshiftleft(urtcmd$, 1)
	rc = ExtractStrToken(urtcmd$, tkn$)
	if strcmp(tkn$, "level")==0 then
		strshiftleft(urtcmd$,1)
		rc = ExtractStrToken(urtcmd$, tkn$)

		if strcmp(tkn$,"low")==0 then
			// unpair with device after getting all tokens from command
			secPair = 0
		
		elseif strcmp(tkn$,"medium")==0 || strcmp(tkn$,"high")==0 then
			// pair with device after getting all tokens from command
			secPair = 1

		endif
	endif

endfunc 1 
//-------------------------------------------------------------------------
// gatttool -b <bdaddr> --primary
//-------------------------------------------------------------------------
function _gattPrimary() as integer

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool primary help menu
			print "Usage:\n"
			print "		gatttool -b <bdaddr> --primary\n"
			exitfunc 1

		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			// get address 
			addr$ = strdehexize$(addr$)

		elseif strcmp(tkn$,"device")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, addr$)

		elseif strcmp(tkn$, "sec")==0 then
			//call the sec-level function to pair or unpair with LE device
			rc = _gattSecLvl()

		endif
	endwhile
'--------------------------------------'

	rc = BleGetConnHandleFromAddr(addr$, conHdl)
	AssertResCode(rc)

	if secPair == 1 then
		rc = BlePair(conHdl, 0)
		AssertResCode(rc)
	endif

	rc = BleGattcOpen(0,0)
	AssertResCode(rc)
	rc = BleDiscServiceFirst(conHdl,0,0)
	AssertResCode(rc)

endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <bdaddr> --characteristics
//-------------------------------------------------------------------------
function _gattChar() as integer

'--- Extract all strings in command ---'
'--------------------------------------'
		while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool characteristics help menu
			print "Usage:\n"
			print "		gatttool -b <bdaddr> --characteristics\n"
			exitfunc 1

		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)
	
		elseif strcmp(tkn$,"device")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, addr$)

		elseif strcmp(tkn$, "sec")==0 then
			//call the sec-level function to piar or unpair with LE device
			rc = _gattSecLvl()

		endif
	endwhile
'--------------------------------------'

	rc = BleGetConnHandleFromAddr(addr$, conHdl)
	AssertResCode(rc)
	
	if secPair == 1 then
		rc = BlePair(conHdl, 0)
		AssertResCode(rc)
	endif

	rc = BleGattcOpen(0,0)
	AssertResCode(rc)
	rc = BleDiscServiceFirst(conHdl,0,0)
	AssertResCode(rc)

endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <bdaddr> --char-read --handle=0x0000
//-------------------------------------------------------------------------
function _gattCharRead() as integer

'--- Extract all strings in command ---'
'--------------------------------------'	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <bdaddr> --char-read --handle=0x0000 \n"
			exitfunc 1

		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)

		elseif strcmp(tkn$,"device")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, addr$)

		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, valHdl)

		elseif strcmp(tkn$, "sec")==0 then
			//call the sec-level function to pair or unpair with LE device
			rc = _gattSecLvl()

		elseif strcmp(tkn$, "l")==0 then
			//call the sec-level function to pair or unpair with LE device
			rc = _gattSecLvl()

		endif 
	endwhile
'--------------------------------------'

	rc = BleGetConnHandleFromAddr(addr$, conHdl)
	AssertResCode(rc)

	if secPair == 1 then
		rc = BlePair(conHdl, 0)
		AssertResCode(rc)
	endif

	rc = BleGattcOpen(0,0)
	AssertResCode(rc)
	rc = BleGattcRead(conHdl,valHdl,0)
	AssertResCode(rc)

endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <bdaddr> --char-write --handle=0x0000  --value=0000
//-------------------------------------------------------------------------
function _gattCharWrite() as integer

	dim val$								// value (string format)
	dim val									// value (integer format)

'--- Extract all strings in command ---'
'--------------------------------------'	
	while ExtractStrToken(urtcmd$, tkn$)!=0 
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <bdaddr> --char-write --handle=0x0000 --value=0000 \n"
			exitfunc 1

		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)

		elseif strcmp(tkn$,"device")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, addr$)

		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, valHdl)

		elseif strcmp(tkn$,"value")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, val$)
			val$ = StrDehexize$(val$)

		elseif strcmp(tkn$, "sec")==0 then
			//call the sec-level function to piar or unpair with LE device
			rc = _gattSecLvl()

		elseif strcmp(tkn$, "listen")==0 then
			gattLsn = 1

		endif 
	endwhile
'--------------------------------------'

	rc = BleGetConnHandleFromAddr(addr$, conHdl)
	AssertResCode(rc)

	if secPair == 1 then
		rc = BlePair(conHdl, 0)
		AssertResCode(rc)
		delay(5)
	endif

	rc = BleGattcOpen(0,0)
	AssertResCode(rc)
	rc = BleGattcWrite(conHdl,valHdl,val$)
	AssertResCode(rc)

	if gattLsn == 1 then
		rc = SendMsgApp(0, GATTTOOL_LISTEN)
		AssertResCode(rc)
	endif

endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <bdaddr> --char-desc  --handle=0x0000
//-------------------------------------------------------------------------
function _gattCharDesc()

	chrHdl = 0

'--- Extract all strings in command ---'
'--------------------------------------'	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <bdaddr> --char-desc --handle=0x0000\n"
			exitfunc 1

		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)

		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, chrHdl)

		elseif strcmp(tkn$, "sec")==0 then
			//call the sec-level function to piar or unpair with LE device
			rc = _gattSecLvl()

		endif
	endwhile
'--------------------------------------'

	rc = BleGetConnHandleFromAddr(addr$, conHdl)
	AssertResCode(rc)

	if secPair == 1 then
		rc = BlePair(conHdl, 0)
		AssertResCode(rc)
	endif

	rc = BleGattcOpen(0,0)
	AssertResCode(rc)
	rc = BleDiscDescFirst(conHdl, 0, chrHdl)
	AssertResCode(rc)

endfunc 1