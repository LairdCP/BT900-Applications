
//-------------------------------------------------------------------------
// hcitool inq [--length=N] [--numrsp=N]				// [] denotes optional parameters
//-------------------------------------------------------------------------
function _inquiry()  
	DIM inqLen, numRsp, si$
	
	print "Inquiring...\n"
	
	//Initialise the default values for inquiry length and number of responses
	inqLen = 10
	numRsp = 50
	
	//Configure Classic Inquiry
	//Youssif: posssibly moved to hciconfig  inqmode in the future
	rc = BtcInquiryConfig(0, 0)			//Inquiry type: General
	rc = BtcInquiryConfig(1, 2)			//Inquiry mode: Extended
	
    //if strcmp(tkn$,"cancel")==0 then
    //    //cancel the inquiry
    //    exitfunc BtcInquiryCancel()
    //endif
	
		
	//Extract all parameters to understand function before processing
	while ExtractStrToken(urtcmd$, tkn$)!=0
	si$ = Left$(tkn$,10)
		if strcmp(tkn$,"help")==0 then
			//print the inquiry help menu
			print "Usage:\n"
			print "	inq	[--length=N] maximum inquiry duration in 1.28 s units\n"
			print "		[--numrsp=N] specify maximum number of inquiry responses\n"
			//print "		[--iac=lap]  specify the inquiry access code\n"
			//print "		[--flush]    flush the inquiry cache\n"
			exitfunc 1
		elseif strcmp(tkn$,"length")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,inqLen)			//extract the integer value of the string	
		elseif strcmp(tkn$,"numrsp")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,numRsp)			//extract the integer value of the string
		endif
	endwhile

	//Now begin inquiry
	rc = btcInquiryConfig(4, numRsp)
	exitfunc btcinquirystart(inqLen)					//Must check for rc here
		
endfunc 5
//-------------------------------------------------------------------------
// hcitool dev
//-------------------------------------------------------------------------
function _dev()
	
	DIM str$
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the dev help menu
			print "Usage:\n"
			print "		dev\n"
			exitfunc 1
		endif
	endwhile
	
	str$ = SYSINFO$(4)
	str$ = right$(str$, 6)
	print "";StrHexize$(str$);"\n"
			
endfunc 5
//-------------------------------------------------------------------------
// hcitool cc [--role=m|s] [--ptype=pkt_types] <bdaddr>				//[] denotes optional fields
//-------------------------------------------------------------------------
function _SppConnect()
	DIM str$
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		//print the  hcitool cc help menu
		print "Usage:\n"
		print "		cc [--role=m|s] [--ptype=pkt_types] <bdaddr>\n"
		print "Example:\n"
		print "		cc --ptype=dm1,dh3,dh5 01:02:03:04:05:06\n"
		print "		cc --role=m 01:02:03:04:05:06\n"
		
		exitfunc 1
		
		else
			tkn$ = strdehexize$(tkn$)
			rc = BtcSppConnect(tkn$)
		endif
	endwhile
endfunc 5

//-------------------------------------------------------------------------
// hcitool dc <bdaddr>
//-------------------------------------------------------------------------
function _SppDisconnect()
	DIM str$
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		//print the hcitool dc help menu
		print "Usage:\n"
		print "		dc <bdaddr> [reason]\n"
		
		exitfunc 1
		
		else
			tkn$ = strdehexize$(tkn$)
			rc = BtcGetHandleFromBDAddr(tkn$,hcSpp)
			rc = BtcSppDisconnect(hcSpp)
		endif
	endwhile
endfunc 5

//-------------------------------------------------------------------------
// hcitool auth	<bdaddr>
//-------------------------------------------------------------------------
function _auth()
	
	print "Trying to authenticate to device\n"
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the hcitool auth help menu
			print "Usage:\n"
			print "		auth <bdaddr>\n"
		
			exitfunc 1
		
		else
			tkn$ = strdehexize$(tkn$)
			rc = BtcPair(tkn$, 0)						// Do not store bonding information 
		endif
	endwhile
endfunc 1
//-------------------------------------------------------------------------
// hcitool lescan [--privacy] [--passive] [--discovery=g|l] [--duplicates]			//[] denotes optional fields
//-------------------------------------------------------------------------
function _leScan()
	
	dim si$
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
			si$ = Left$(tkn$,10)
			if strcmp(tkn$,"help")==0 then
				//print the lescan help menu
			print "Usage:\n"
			print "		lescan [--privacy] enable privacy\n"
			print "		lescan [--passive] set scan type passive (default active)\n"
			print "		lescan [--discovery=g|l] enable general or limited discovery procedure\n"
			print "		lescan [--duplicates] don't filter duplicates\n"
				exitfunc 1
			//elseif strcmp(tkn$,"privacy")==0 then

			//	strshiftleft(urtcmd$, 1)					//discard the = sign
			//	rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			//	rc = extractInttoken(tkn$,inqLen)			//extract the integer value of the string
			
			//elseif strcmp(tkn$,"numrsp")==0 then

			//	strshiftleft(urtcmd$, 1)					//discard the = sign
			//	rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			//	rc = extractInttoken(tkn$,numRsp)			//extract the integer value of the string
			endif
		endwhile
		
		print "LE Scan ...\n"
		exitfunc BleScanStart(5000, 0)						//Scan for 30 seconds. No filtering of adverts.	
endfunc 5
//-------------------------------------------------------------------------
// hcitool lecc [--random] <bdaddr>							// [] denotes optional fields
//-------------------------------------------------------------------------
function _leConnect() as integer
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the hcitool lecc help menu
			print "Usage:\n"
			print "		lecc [--random] <bdaddr>\n"
			//print "		lecc --whitelist\n"
		
			exitfunc 1
		
		else
			tkn$ = strdehexize$(tkn$)
			rc = BleConnect(tkn$, 5000, 20000, 75000, 5000000)						// ConnectionTimeoutms, minConIntervalus, maxConIntervalus, nSupervisionTimeoutus
			if rc == 0 then
				print "connecting... \n"
			else
				print "rc = ";integer.h' rc;"  not connectong, there is a problem \n"
			endif
		endif
	endwhile
endfunc 5
//-------------------------------------------------------------------------
// hcitool ledc <bdaddr>
//-------------------------------------------------------------------------
function _leDisconnect() as integer
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the hcitool ledc help menu
			print "Usage:\n"
			print "		ledc <bdaddr>\n"
		
			exitfunc 1
		
		else
			tkn$ = strdehexize$(tkn$)
			rc = bledisconnect(hz)						// Do not store bonding information 
		endif
	endwhile
endfunc 5
//=========================================================================
//						GATTTOOL
//=========================================================================

//-------------------------------------------------------------------------
// gatttool -b <MAC Address> --primary
//-------------------------------------------------------------------------
function _GattPrimary() as integer

print "Reached gatt primary\n"
	dim addr$
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <MAC Address> --primary\n"
			
			exitfunc 1
		else
			if strcmp(tkn$,"b")==0 then
				rc = ExtractStrToken(urtcmd$,addr$)
				// connect to this device and get handle
				addr$ = strdehexize$(addr$)
				//rc = BleConnect(addr$, 5000, 20000, 75000, 5000000)
				//if rc == 0 then
				//	print "connectong \n"
				//else
				//	print "not connectong, there is a problem\n"
				//endif
				// discover services from handle
				
				rc = BleGattcOpen(0,0)
				
				rc = BleDiscServiceFirst(hz,0,0)
				//BleGattcClose()
				// disconnect
				//rc = BleDisconnect(hz)
			endif
		endif
	endwhile
endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <MAC Address> --characteristics
//-------------------------------------------------------------------------
function _GattChar() as integer
		dim addr$
		while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <MAC Address> --characteristics\n"
			
			exitfunc 1
		else
			if strcmp(tkn$,"b")==0 then
				rc = ExtractStrToken(urtcmd$,addr$)
				// connect to this device and get handle
				addr$ = strdehexize$(addr$)
				//rc = BleConnect(addr$, 5000, 20000, 75000, 5000000)
				//if rc == 0 then
				//	print "connectong \n"
				//else
				//	print "not connectong, there is a problem\n"
				//endif
				// discover services from handle
				
				rc = BleGattcOpen(0,0)
				
				rc = BleDiscServiceFirst(hz,0,0)
				//BleGattcClose()
				// disconnect
				//rc = BleDisconnect(hz)
			endif
		endif
	endwhile
endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <MAC Address> --char-read --handle=0x0000
//-------------------------------------------------------------------------
function _GattCharRead() as integer
	dim addr$, hndl
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <MAC Address> --char-read --handle=0x0000 \n"
			exitfunc 1
		
		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)
		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, hndl)
		endif 
	endwhile
	
	rc = BleGattcOpen(0,0)											//must check rc here
	rc = BleGattcRead(hz,hndl,0)
	if rc !=0 then
		print "verbose error message ";integer.h' rc;"\n"
	endif
	
endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <MAC Address> --char-write --handle=0x0000
//-------------------------------------------------------------------------
function _GattCharWrite() as integer
	dim addr$, hndl, val$
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <MAC Address> --char-write --handle=0x0000 \n"
			exitfunc 1
		
		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)
		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, hndl)
		elseif strcmp(tkn$,"value")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, val$)
			//rc = ExtractIntToken(tkn$, val)
		endif 
	endwhile
	
	if strcmp(val$,"")==0 then
		print "A value is required\n"
		exitfunc 1
	endif
	
	print "At this point, the input data token is : ";val$;" \n"
	rc = BleGattcOpen(0,0)											//must check rc here
	rc = BleGattcWrite(hz,hndl,val$)
	if rc !=0 then
		print "verbose error message ";integer.h' rc;"\n"
	endif
	
endfunc 1