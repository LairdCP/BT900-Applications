
//-------------------------------------------------------------------------
// hcitool inq [--length=N] [--numrsp=N]				// [] denotes optional parameters
//-------------------------------------------------------------------------
function _hciInq()  
	
	DIM inqLen : inqLen = 10
	DIM numRsp : numRsp = 50
		
	//Extract all parameters to understand function before processing
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// print the inquiry help menu
			print "Usage:\n"
			print "		hcitool inq	[--length=N] maximum inquiry duration in seconds\n"
			print " 				[--numrsp=N] specify maximum number of inquiry responses\n"
			exitfunc 1
			
		elseif strcmp(tkn$,"length")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,inqLen)			//extract the integer value of the string	
		
		elseif strcmp(tkn$,"numrsp")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,numRsp)			//extract the integer value of the string

		endif
	endwhile
	
	print "Inquiring ...\n"
	// specify maximum number of responses
	rc = btcInquiryConfig(2, numRsp)
	AssertResCode(rc)
	// start inquiry
	rc =  btcinquirystart(inqLen)
	AssertResCode(rc)
		
endfunc 1
//-------------------------------------------------------------------------
// hcitool scan [--length=N] [--numrsp=N]				// [] denotes optional parameters
//-------------------------------------------------------------------------
function _hciScan()
	
	DIM inqLen : inqLen = 10
	DIM numRsp : numRsp = 50
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// print the scan help menu
			print "Usage:\n"
			print "		hcitool scan [--length=N] maximum inquiry duration in seconds\n"
			print " 				 [--numrsp=N] specify maximum number of inquiry responses\n"
			exitfunc 1
		
		elseif strcmp(tkn$,"length")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,inqLen)			//extract the integer value of the string	
		
		elseif strcmp(tkn$,"numrsp")==0 then
			strshiftleft(urtcmd$, 1)					//discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			rc = extractInttoken(tkn$,numRsp)			//extract the integer value of the string
	
		endif
	endwhile
	
	print "Scanning ...\n"
	// specify maximum number of responses
	rc = btcInquiryConfig(2, numRsp)
	AssertResCode(rc)
	// start inquiry
	rc =  btcinquirystart(inqLen)
	AssertResCode(rc)

endfunc 1
//-------------------------------------------------------------------------
// hcitool name <bdaddr>
//-------------------------------------------------------------------------
function _hciName()
	
	DIM inqLen : inqLen = 10
	DIM numRsp : numRsp = 30
	DIM num_of_params : num_of_params = 0
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// print the name help menu
			print "Usage:\n"
			print "		name <bdaddr>\n"
			exitfunc 1
		
		else
			addr$ = strdehexize$(tkn$)
			num_of_params = num_of_params + 1
		
		endif
	endwhile
	
	if num_of_params != 1 then
		print "name: too few arguments (minimal: 1)\n"
		print "Usage:\n"
		print "		name <bdaddr>\n"
		exitfunc 1
	endif
	
	// specify maximum number of responses
	rc = btcInquiryConfig(2, numRsp)
	AssertResCode(rc)
	// start inquiry
	rc =  btcinquirystart(inqLen)
	AssertResCode(rc)
	
endfunc 1 
	
//-------------------------------------------------------------------------
// hcitool dev
//-------------------------------------------------------------------------
function _hciDev()
	
	DIM str$
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the dev help menu
			print "Usage:\n"
			print "		dev\n"
			exitfunc 1
		endif
	endwhile
	
	str$ = SYSINFO$(4)
	str$ = right$(str$, 6)
	print "Device: \n     ";name$;"    ";StrHexize$(str$);"\n"
			
endfunc 5
//-------------------------------------------------------------------------
// hcitool cc [--role=m|s] [--ptype=pkt_types] <bdaddr>				//[] denotes optional fields
//-------------------------------------------------------------------------
function _dispCon()
	
	// Maybe try to get the address from handles here
	dim z
	for z=1 to conns
		print "    ";hc[z];"\n"
	next
	
endfunc 1 
//-------------------------------------------------------------------------
// hcitool cc [--role=m|s] [--ptype=pkt_types] <bdaddr>				//[] denotes optional fields
//-------------------------------------------------------------------------
function _hciCc()
	
	DIM str$
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		//print the  hcitool cc help menu
		print "Usage:\n"
		print "		hcitool cc <bdaddr>\n"//[--role=m|s] [--ptype=pkt_types] <bdaddr>\n"
		exitfunc 1
		
		else
			addr$ = tkn$					//if connection is successful, addr$ will be added to array
			tkn$ = strdehexize$(tkn$)
			rc = BtcSppConnect(tkn$)
			AssertResCode(rc)
			if rc == 0 then 
				print "Connecting...\n"
			endif
		endif
	endwhile
endfunc 5

//-------------------------------------------------------------------------
// hcitool dc <bdaddr>
//-------------------------------------------------------------------------
function _hciDc()
	DIM str$
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		//print the hcitool dc help menu
		print "Usage:\n"
		print "		hcitool dc <bdaddr>\n"
		
		exitfunc 1
		
		else
			addr$ = tkn$
			tkn$ = strdehexize$(tkn$)
			rc = BtcGetHandleFromBDAddr(tkn$,hcSpp)
			AssertResCode(rc)
			rc = BtcSppDisconnect(hcSpp)
			AssertResCode(rc)
			if rc == 0 then 
				print "Disconnecting...\n"
			endif
		endif
	endwhile
endfunc 5

//-------------------------------------------------------------------------
// hcitool auth	<bdaddr>
//-------------------------------------------------------------------------
function _hciAuth()
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the hcitool auth help menu
			print "Usage:\n"
			print "		hcitool auth <bdaddr>\n"
		
			exitfunc 1
		
		else
			tkn$ = strdehexize$(tkn$)
			rc = BtcPair(tkn$, 0)						// Do not store bonding information 
			AssertResCode(rc)
		endif
	endwhile
endfunc 1
//-------------------------------------------------------------------------
// hcitool lescan [--privacy] [--passive] [--discovery=g|l] [--duplicates]			//[] denotes optional fields
//-------------------------------------------------------------------------
function _hciLeScan()
	
	dim scnLen : scnLen = 5000
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
			if strcmp(tkn$,"help")==0 then
				//print the lescan help menu
				print "Usage:\n"
				//print "		lescan [--privacy] enable privacy\n"
				//print "		lescan [--passive] set scan type passive (default active)\n"
				//print "		lescan [--discovery=g|l] enable general or limited discovery procedure\n"
				//print "		lescan [--duplicates] don't filter duplicates\n"
				print "		hcitool lescan [--length=N] maximum scan duration in seconds\n"
				print ""
				exitfunc 1
			
			elseif strcmp(tkn$,"length")==0 then
				strshiftleft(urtcmd$, 1)					//discard the = sign
				rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
				rc = extractInttoken(tkn$,scnLen)			//extract the integer value of the string
			
			scnLen = scnLen*1000
			//elseif strcmp(tkn$,"numrsp")==0 then
			//	strshiftleft(urtcmd$, 1)					//discard the = sign
			//	rc = extractStrToken(urtcmd$, tkn$)			//take the next string from the command
			//	rc = extractInttoken(tkn$,numRsp)			//extract the integer value of the string
			endif
		endwhile
		
		rc = BleScanStart(scnLen, 0)							//Scan for 30 seconds. No filtering of adverts.	
		if rc == 0 then 
			print "LE Scan...\n"
		endif
		
endfunc 5
//-------------------------------------------------------------------------
// hcitool lecc [--random] <bdaddr>							// [] denotes optional fields
//-------------------------------------------------------------------------
function _hciLeCc() as integer
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the hcitool lecc help menu
			print "Usage:\n"
			print "		hcitool lecc <bdaddr>\n"
			//print "		lecc --whitelist\n"
		
			exitfunc 1
		
		else
			addr$ = tkn$
			tkn$ = strdehexize$(tkn$)
			rc = BleConnect(tkn$, 5000, 20000, 75000, 5000000)						// ConnectionTimeoutms, minConIntervalus, maxConIntervalus, nSupervisionTimeoutus
			AssertResCode(rc)
			if rc == 0 then
				print "Connecting... \n"
			endif
		
		endif
	endwhile
	
endfunc 5
//-------------------------------------------------------------------------
// hcitool ledc <handle>
//-------------------------------------------------------------------------
function _hciLeDc() as integer
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the hcitool ledc help menu
			print "Usage:\n"
			print "		hcitool ledc <handle>\n"
		
			exitfunc 1
		
		else
			hz = StrValDec(tkn$)
			rc = bledisconnect(hz)						// Do not store bonding information 
			if rc == 0 then 
				print "Disconnecting...\n"
			endif
		endif
	endwhile
	
endfunc 5
//=========================================================================
//						RFCOMM
//=========================================================================
//-------------------------------------------------------------------------
// rfcomm connect <MAC Address> 
//-------------------------------------------------------------------------
function _rfcommConnect()
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		rfcomm connect <MAC Address>\n"
			exitfunc 1
			
		else
			if strcmp(tkn$,"")==0 then
				print "A valid Bluetooth address is required\n"
			else
				break
			endif
		endif
	endwhile
	
	//Here get handle from provided address
	tkn$ = strdehexize$(tkn$)
	rc = BtcSppConnect(tkn$)
	AssertResCode(rc)
	
endfunc 1 
//-------------------------------------------------------------------------
// rfcomm write --handle=0000 --data=abc123
//-------------------------------------------------------------------------
function _rfcommWrite()

	dim hndl, dta$, len
		
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			print "Usage:\n"
			print "		rfcomm write --handle=0000 --data=abc123\n"
			exitfunc 1
		
		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, hndl)
		
		elseif strcmp(tkn$, "data")==0 then
			strshiftleft(urtcmd$, 1)
			dta$ = urtcmd$
			break
		endif
		
	
	endwhile
	
	rc = BtcSppWrite(hndl, dta$, len)
	AssertResCode(rc)
	
endfunc 1
//-------------------------------------------------------------------------
// rfcomm listen --handle=0000
//-------------------------------------------------------------------------
function _rfcommLsn()

	dim hndl, dta$, len

	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			print "Usage:\n"
			print "		rfcomm listen --handle=0000\n"
			exitfunc 1
			
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, hndl)
			
		endif
	endwhile
	
	rc = BtcSppRead(hndl, dta$, len)
	AssertResCode(rc)
	print "Incoming data: ";dta$;"\n"
	
endfunc 1

//-------------------------------------------------------------------------
// rfcomm listen --handle=0000
//-------------------------------------------------------------------------

function _rfcommBind()
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the rfcomm bind help menu
			print "Usage:\n"
			print "		rfcomm bind --handle=0000\n"
			exitfunc 1
			
		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, hcSpp)
			
		//else
		//	print "bind: too few arguments\n"
		//	exitfunc 1
		endif
	endwhile
	
	tkn$ = strdehexize$(tkn$)
	rc=SendMsgApp(0,BRIDGE_SPP_MODE)
	exitfunc -1
	
endfunc 1
//=========================================================================
//						GATTTOOL
//=========================================================================

//-------------------------------------------------------------------------
// gatttool -b <MAC Address> --primary
//-------------------------------------------------------------------------
function _GattPrimary() as integer

	dim addr$
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <MAC Address> --primary\n"
			exitfunc 1
			
		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			// connect to this device and get handle
			addr$ = strdehexize$(addr$)
			
		elseif strcmp(tkn$,"device")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, addr$)
		
		endif
	endwhile
	
	rc = BleGattcOpen(0,0)
	AssertResCode(rc)
	rc = BleDiscServiceFirst(hz,0,0)
	AssertResCode(rc)
	
endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <MAC Address> --characteristics
//-------------------------------------------------------------------------
function _GattChar() as integer
		dim addr$
		while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <MAC Address> --characteristics\n"
			exitfunc 1
			
		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)
			
		elseif strcmp(tkn$,"device")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, addr$)
			
		endif
	endwhile
	
	rc = BleGattcOpen(0,0)
	AssertResCode(rc)
	rc = BleDiscServiceFirst(hz,0,0)
	AssertResCode(rc)
	
endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <MAC Address> --char-read --handle=0x0000
//-------------------------------------------------------------------------
function _GattCharRead() as integer
	dim addr$, hndl
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <MAC Address> --char-read --handle=0x0000 \n"
			exitfunc 1
		
		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)
		
		elseif strcmp(tkn$,"device")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, addr$)
		
		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, hndl)
		
		endif 
	endwhile
	
	rc = BleGattcOpen(0,0)											//must check rc here
	AssertResCode(rc)
	rc = BleGattcRead(hz,hndl,0)
	AssertResCode(rc)

	
endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <MAC Address> --char-write --handle=0x0000
//-------------------------------------------------------------------------
function _GattCharWrite() as integer
	dim addr$, hndl, val$
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <MAC Address> --char-write --handle=0x0000 \n"
			exitfunc 1
		
		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)
		elseif strcmp(tkn$,"device")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, addr$)
		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, hndl)
		elseif strcmp(tkn$,"value")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, val$)
			//rc = ExtractIntToken(tkn$, val)
		endif 
	endwhile
	
	if strcmp(val$,"")==0 then
		print "A value is required\n"
		exitfunc 1
	endif
	
	val$="\02\00"
	rc = BleGattcOpen(0,0)
	AssertResCode(rc)
	rc = BleGattcWrite(hz,hndl,val$)
	AssertResCode(rc)
	
endfunc 1
//-------------------------------------------------------------------------
// gatttool -b <MAC Address> --char-desc
//-------------------------------------------------------------------------
function _GattCharDesc()
	dim addr$, hndl
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//print the gatttool help menu
			print "Usage:\n"
			print "		gatttool -b <MAC Address> --char-desc\n"
			exitfunc 1
		
		elseif strcmp(tkn$,"b")==0 then
			rc = ExtractStrToken(urtcmd$,addr$)
			addr$ = strdehexize$(addr$)
		
		elseif strcmp(tkn$,"handle")==0 then
			strshiftleft(urtcmd$, 1)
			rc = ExtractStrToken(urtcmd$, tkn$)
			rc = ExtractIntToken(tkn$, hndl)
			
		endif
		
	endwhile
	
	rc = BleGattcOpen(0,0)
	AssertResCode(rc)
	rc = BleDiscDescFirst(hz, 0, hndl)
	AssertResCode(rc)
	
endfunc 1