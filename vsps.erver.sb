 //******************************************************************************
 // Laird Technologies (c) 2014
 //
 // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 // +++++                                                                      ++
 // +++++  When UwTerminal downloads the app it will store it as a filenname   ++
 // +++++  which consists of all characters up to the first . and excluding it ++
 // +++++                                                                      ++
 // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 //
 // BT900 custom VSP service: This application will host a VSP service and allow
 //                           connections and communication similar to how VSP
 //                           mode on the BL600 works.
 //
 //******************************************************************************

//Defines
#define BASEUUID "\56\9a\11\01\b8\7f\49\0c\92\cb\11\ba\5e\a5\16\7c" //VSP base UUID
#define MIUUID "\56\9a\20\03\b8\7f\49\0c\92\cb\11\ba\5e\a5\16\7c"   //Modem in UUID
#define MOUUID "\56\9a\20\02\b8\7f\49\0c\92\cb\11\ba\5e\a5\16\7c"   //Modem out UUID
#define RXUUID "\56\9a\20\01\b8\7f\49\0c\92\cb\11\ba\5e\a5\16\7c"   //Receive VSP UUID
#define TXUUID "\56\9a\20\00\b8\7f\49\0c\92\cb\11\ba\5e\a5\16\7c"   //Transmit VSP UUID

//Global variables
dim rc //Result code
dim svcID //Service ID
dim TXchar //TX characteristic
dim RXchar //RX characteristic
dim MOchar //Modem Out characteristic
dim MIchar //Modem In characteristic
dim MIval //Modem In value
dim SendData$ //Data from the UART waiting to be sent out
dim UARTBlocked : UARTBlocked = 0 //When set to 1 will not read data from the UART

//Result code checking sub-routine
sub assertRC(rc, line)
    IF rc != 0 THEN
        PRINT "\nError on line ";line;", code: ";INTEGER.H'rc
    ENDIF
endsub

FUNCTION CreateVSPService()
    dim UUIDStr$, mdCccd, mdVal, s$
    s$ = "a" //Default value for characteristics

    //Create the VSP service
    UUIDStr$ = BASEUUID
    rc = BleServiceNew(1, BleHandleUuid128(UUIDStr$), svcID)
    assertRC(rc, 1)

    //Create the ModemIn characteristic
    mdVal=BleAttrMetadata(0,1,2,0,rc)
    UUIDStr$ = MIUUID
    rc = BleCharNew(4+8, BleHandleUuid128(UUIDStr$), mdVal, 0, 0)
    assertRC(rc, 2)
    s$ = "0" //Enabled by default
    rc = BleCharCommit(svcID, s$, MIchar)
    assertRC(rc, 3)

    //Create the ModemOut characteristic
    mdVal=BleAttrMetadata(0,0,2,0,rc)
    mdCccd = BleAttrMetadata(1,1,2,0,rc) //Metadata for CCCD attribute of Characteristic
    UUIDStr$ = MOUUID
    rc = BleCharNew(16, BleHandleUuid128(UUIDStr$), mdVal, mdCccd, 0)
    assertRC(rc, 4)
    rc = BleCharCommit(svcID, s$, MOchar)
    assertRC(rc, 5)

    //Create the RX characteristic
    mdVal=BleAttrMetadata(0,1,20,0,rc)
    UUIDStr$ = RXUUID
    rc = BleCharNew(4+8, BleHandleUuid128(UUIDStr$), mdVal, 0, 0)
    assertRC(rc, 6)
    rc = BleCharCommit(svcID, s$, RXchar)
    assertRC(rc, 7)

    //Create the TX characteristic
    mdVal=BleAttrMetadata(0,0,20,0,rc)
    mdCccd = BleAttrMetadata(1,1,2,0,rc) //Metadata for CCCD attribute of Characteristic
    UUIDStr$ = TXUUID
    rc = BleCharNew(16, BleHandleUuid128(UUIDStr$), mdVal, mdCccd, 0)
    assertRC(rc, 8)
    rc = BleCharCommit(svcID, s$, TXchar)
    assertRC(rc, 9)

    //Commit the service
    rc = BleServiceCommit(svcID)
    assertRC(rc, 10)
ENDFUNC 1

FUNCTION StartVSPAdvert()
    dim addr$, scRpt$, adRpt$, UUIDStr$
    //Start sending adverts containing the VSP service 
    scRpt$=""
    rc = BleScanRptInit(scRpt$)
    assertRC(rc, 11)

    //Advertise the 128 bit uuid in a scan report
    UUIDStr$ = BASEUUID
    rc = BleAdvRptAddUuid128(scRpt$, BleHandleUuid128(UUIDStr$))
    assertRC(rc, 12)
    adRpt$=""

    //Commit the advert report
    rc = BleAdvRptsCommit(adRpt$,scRpt$)
    assertRC(rc, 13)

    //Start advertising
    addr$=""  //because we are not doing a DIRECT advert
    rc = BleAdvertStart(0,addr$,20,30000,0)
    assertRC(rc, 14)
ENDFUNC 1

FUNCTION HndlrCharVal(charHandle, offset, len)
    //Characteristic written
    dim Rd$
    rc = BleCharValueRead(charHandle, Rd$)
    assertRC(rc, 15)
    IF charHandle == RXchar THEN
        //RX
        PRINT Rd$
    ENDIF
ENDFUNC 1

FUNCTION HndlrUartRx()
    //UART data received
    dim RdLen, Rd$
    IF UARTBlocked == 0 THEN
        //UART is not blocked
        rc = BleCharValueRead(MIchar, Rd$)
        assertRC(rc, 16)
        IF strcmp(Rd$, "0") == 0 THEN
            //Other device is able to accept
            RdLen = UARTREADN(SendData$, 20)

            IF RdLen > 0 THEN
                //Write this data to the characteristic
                rc = BLECHARVALUENOTIFY(TXchar, SendData$)
                IF rc != 0 THEN
                    //Failed to send data
                    UARTBlocked = 1
                    RdLen = 0
                ELSE
                    //Data queued, clear variable
                    SendData$ = ""
                ENDIF
            ENDIF
        ENDIF
    ENDIF
ENDFUNC 1

FUNCTION HndlrNtfyBuf()
    //BLE notify buffer has free space
    IF UARTBlocked == 1 THEN
        //UART is blocked but we now have free space
        IF strlen(SendData$) > 0 THEN
            //Data in variable to send
            rc = BLECHARVALUENOTIFY(TXchar, SendData$)
            IF rc != 0 THEN
                //Use a timer to send the next data chunk
                TIMERSTART(0, 400, 0)
            ELSE
                //Data sent - clear data
                SendData$ = ""
            ENDIF
        ELSE
            //No data in variable to send, check UART
            UARTBlocked = 0
            rc = HndlrUartRx()
        ENDIF
    ELSE
        //Check for UART data
        rc = HndlrUartRx()
    ENDIF
ENDFUNC 1

//Create the VSP service and start advertising it
rc = CreateVSPService()
rc = StartVSPAdvert()

ONEVENT  EVCHARVAL   CALL HndlrCharVal  //BLE characteristic written
ONEVENT  EVNOTIFYBUF CALL HndlrNtfyBuf  //BLE Notify buffer free
ONEVENT  EVUARTRX    CALL HndlrUartRx   //Recieved UART data
ONEVENT  EVTMR0      CALL HndlrNtfyBuf  //Timer 0 expired

WAITEVENT
