//RTC Advert script.
//* Sends BLE adverts with time from RTC
//* Allows remote time setting
//* Supports alarm wakeup with broadcast on event
//* Allows remote wakeup configuration
//* Uses buzzer as a wake-up alarm (SIO_12) when jumped is enabled

#DEFINE BLE_SERVICE_SECONDARY                           0
#DEFINE BLE_SERVICE_PRIMARY                             1

dim rc //Result code
dim I2Ch //I2C Handle
DIM Service1 //composite handle for hts primary service
DIM Service1UUID : Service1UUID = BleHandleUuid16(0x1805) //HT Svc UUID Handle, 0x1805 for current time service
DIM Char1 //Characteristic 1 (Current time)
DIM Char2 //Characteristic 2 (Local time)
DIM Char3 //Characteristic 3 (Reference time)
DIM Char4 //Characteristic 4 (Update clock)
DIM Char5 //Characteristic 5 (Alarm mode control)
DIM Char6 //Characteristic 6 (Alarm time control)
DIM Char7 //Characteristic 7 (Version)
DIM Timezone : Timezone = 0 //Hours off from UTC, see https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.time_zone.xml
DIM DST : DST = 0 //0 for no DST, 4 for +1 hour DST, see https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.dst_offset.xml
DIM SendNotify : SendNotify = 0 //Set to 1 when notifications are enabled
dim APP_VERSION$ : APP_VERSION$ = "0.7"
dim BuzzerFunc : BuzzerFunc = 0 //Which function to do with the buzzer next
dim I2CSpeed : I2CSpeed = 250000 //250KHz#
dim RTCAddr : RTCAddr = 111 //I2C Address of RTC

'//******************************************************************************
'// Command success handler
'//******************************************************************************
SUB AssertRC(rc,ln)   
    IF rc!=0 THEN
        PRINT "\nFail :";integer.h' rc;" at tag ";ln
    ENDIF
ENDSUB

FUNCTION StartBuzzer()
	//Starts the buzzing for the alarm wakeup
	rc = GpioWrite(12, 5000)
	BuzzerFunc = 0
	TimerStart(1, 200, 1)
	
ENDFUNC 1

FUNCTION StopBuzzer()
	//Stops the buzzer from making a noise
	rc = GpioWrite(12, 0)
ENDFUNC 1

FUNCTION HndlrTmr0()
	//Timer function to read RTC and output value
	dim secVal, minVal, hourVal, dateVal, monthVal, yearVal
	rc = I2COpen(I2CSpeed, 0, I2Ch)
	rc = I2CReadReg8(RTCAddr, 0, secVal)
	rc = I2CReadReg8(RTCAddr, 1, minVal)
	rc = I2CReadReg8(RTCAddr, 2, hourVal)
	rc = I2CReadReg8(RTCAddr, 4, dateVal)
	rc = I2CReadReg8(RTCAddr, 5, monthVal)
	rc = I2CReadReg8(RTCAddr, 6, yearVal)
	
	//Close I2C connection
	I2CClose(I2Ch)
	
	//Convert I2C RTC values into time & date information
	dim Seconds, Minutes, Hours, Day, Month, Year
	Seconds = ((secVal & 15) + ((secVal & 112)>>4)*10)
	Minutes = ((minVal & 15) + ((minVal & 112)>>4)*10)
	Hours = ((hourVal & 15) + ((hourVal & 48)>>4)*10)
	Day = ((dateVal & 15) + ((dateVal & 48)>>4)*10)
	Month = ((monthVal & 15) + ((monthVal & 16)>>4)*10)
	Year = (2001 + (yearVal & 15) + ((yearVal & 240)>>4)*10)
	PRINT Hours;":";Minutes;":";Seconds;" on ";Day;"/";Month;"/";Year;"\n"
	
	//Encode data
	dim TmpStr$ : TmpStr$ = ""	
	rc = BleEncode8(TmpStr$, 0, 0) //Adjust reason
	rc = BleEncode8(TmpStr$, 0, 1) //1/256 seconds
	rc = BleEncode8(TmpStr$, 0, 2) //Day of week
	rc = BleEncode8(TmpStr$, Seconds, 3)
	rc = BleEncode8(TmpStr$, Minutes, 4)
	rc = BleEncode8(TmpStr$, Hours, 5)
	rc = BleEncode8(TmpStr$, Day, 6)
	rc = BleEncode8(TmpStr$, Month, 7)
	rc = BleEncode16(TmpStr$, Year, 8)
	
	//Update GATT information
	rc = BleCharValueWrite(Char1, TmpStr$)
	assertrc(rc,999)
	
	//Update BLE advert with new information
	DIM advRpt$ : advRpt$ = ""
	DIM scRpt$ : scRpt$ = ""
	rc = BleAdvRptInit(advRpt$, 2, 1, 10)
	AssertRC(rc,78)
	rc = BleAdvRptAppendAD(advRpt$, 0x16, TmpStr$)
	AssertRC(rc,80)
	rc = BleAdvRptsCommit(advRpt$, scRpt$)
	AssertRC(rc,82)
		
	//Send notification if enabled
	IF SendNotify == 1 THEN
		rc = BleCharValueNotify(Char1, TmpStr$)
		AssertRC(rc,84)
	ENDIF
ENDFUNC 1

FUNCTION HndlrTmr1()
	//Stops the buzzer
	IF BuzzerFunc == 0 THEN
		rc = GpioWrite(12, 2000)
		//TimerStart(1, 200, 0)
	ELSEIF BuzzerFunc == 1 THEN
		rc = GpioWrite(12, 6000)
		//TimerStart(1, 200, 0)
	ELSEIF BuzzerFunc == 2 THEN
		rc = GpioWrite(12, 3000)
		//TimerStart(1, 200, 0)
	ELSEIF BuzzerFunc == 3 THEN
		rc = GpioWrite(12, 12000)
		//TimerStart(1, 200, 0)
	ELSE
		rc = StopBuzzer()
		TimerCancel(1)
	ENDIF
	BuzzerFunc = BuzzerFunc+1
ENDFUNC 1

FUNCTION HndlrCharCccd(BYVAL charHandle, BYVAL nVal)
	//Runs when CCCD has been written
	IF nVal == 1 THEN
		SendNotify = 1
	ELSE
		SendNotify = 0
	ENDIF
ENDFUNC 1

FUNCTION BleEvent(BYVAL msgID, BYVAL msgCtx)
	//Runs when a BLE connection trigger occurs
	IF msgID == 0 THEN
		//Connection
		PRINT "Connect.\n"
	ELSEIF msgID == 1 THEN
		//Disconnection
		PRINT "End!\n"
		
		SendNotify = 0
		
		//Restart BLE adverts
		dim addr$ : addr$ = ""
		PRINT BleAdvertStart(0,addr$,500,0,0)
	ENDIF
ENDFUNC 1

FUNCTION HndlrCharVal(BYVAL charHandle, BYVAL offset, BYVAL len) 
	//When characteristic is written
	dim attr$
	dim TmpVal, TmpVal2
	IF charHandle == Char4 THEN
		//Time & date has been updated
		rc = BleCharValueRead(charHandle, attr$)
		
		//Open I2C
		rc = I2COpen(I2CSpeed, 0, I2Ch)

		//Seconds
		rc = BleDecodeU8(attr$, TmpVal, 0)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = (((TmpVal2/10)<<4) + (TmpVal & 15)) | 128
		rc = I2CWriteReg8(RTCAddr, 0, TmpVal2) //Seconds

		//Minutes
		rc = BleDecodeU8(attr$, TmpVal, 1)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = ((TmpVal2/10)<<4) + (TmpVal & 15)
		rc = I2CWriteReg8(RTCAddr, 1, TmpVal2) //Minutes
		
		//Hours
		rc = BleDecodeU8(attr$, TmpVal, 2)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = (((TmpVal2/10)<<4) + (TmpVal & 15)) & 63
		rc = I2CWriteReg8(RTCAddr, 2, TmpVal2) //Hour
		
		//Day
		rc = BleDecodeU8(attr$, TmpVal, 3)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = ((TmpVal2/10)<<4) + (TmpVal & 15)
		rc = I2CWriteReg8(RTCAddr, 4, TmpVal2) //Day
		
		//Month
		rc = BleDecodeU8(attr$, TmpVal, 4)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = ((TmpVal2/10)<<4) + (TmpVal & 15)
		rc = I2CWriteReg8(RTCAddr, 5, TmpVal2) //Month
		
		//Year
		rc = BleDecodeU16(attr$, TmpVal, 5)
		TmpVal2 = 0
		TmpVal = TmpVal - 2001
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = ((TmpVal2/10)<<4) + (TmpVal & 15)
		rc = I2CWriteReg8(RTCAddr, 6, TmpVal2) //Year

		//Close I2C
		I2CClose(I2Ch)
	ELSEIF charHandle == Char5 THEN
		//Set/Disable alarm and alarm match
		rc = BleCharValueRead(charHandle, attr$)
		
		//Open I2C
		rc = I2COpen(I2CSpeed, 0, I2Ch)

		//Write data to RTC
		rc = BleDecodeU8(attr$, TmpVal, 0) //On/off
		rc = BleDecodeU8(attr$, TmpVal2, 1) //Alarm match
		TmpVal2 = ((TmpVal2 & 7) << 4) | 128 //Only use 3 bits and shift left, then enable MSB for high-level logic
		
		//Write match conditions to RTC
		rc = I2CWriteReg8(RTCAddr, 0x0d, TmpVal2)
		
		IF TmpVal == 0 THEN
			//Disable alarm
			rc = I2CWriteReg8(RTCAddr, 0x07, 0)
		ELSE
			//Enable alarm
			rc = I2CWriteReg8(RTCAddr, 0x07, 16)
		ENDIF
		
		//Close I2C
		I2CClose(I2Ch)
	ELSEIF charHandle == Char6 THEN
		//Change alarm time
		rc = BleCharValueRead(charHandle, attr$)
		
		//Open I2C
		rc = I2COpen(I2CSpeed, 0, I2Ch)
		
		//Seconds
		rc = BleDecodeU8(attr$, TmpVal, 0)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = (((TmpVal2/10)<<4) + (TmpVal & 15)) | 128
		rc = I2CWriteReg8(RTCAddr, 0x0a, TmpVal2) //Seconds

		//Minutes
		rc = BleDecodeU8(attr$, TmpVal, 1)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = ((TmpVal2/10)<<4) + (TmpVal & 15)
		rc = I2CWriteReg8(RTCAddr, 0x0b, TmpVal2) //Minutes

		//Hours
		rc = BleDecodeU8(attr$, TmpVal, 2)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = (((TmpVal2/10)<<4) + (TmpVal & 15)) & 63
		rc = I2CWriteReg8(RTCAddr, 0x0c, TmpVal2) //Hour

		//Day
		rc = BleDecodeU8(attr$, TmpVal, 3)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = ((TmpVal2/10)<<4) + (TmpVal & 15)
		rc = I2CWriteReg8(RTCAddr, 0x0e, TmpVal2) //Day

		//Month
		rc = BleDecodeU8(attr$, TmpVal, 4)
		TmpVal2 = 0
		WHILE TmpVal > 10
			TmpVal2 = TmpVal2 + 10
			TmpVal = TmpVal - 10
		ENDWHILE
		TmpVal2 = ((TmpVal2/10)<<4) + (TmpVal & 15)
		rc = I2CWriteReg8(RTCAddr, 0x0f, TmpVal2) //Month
		
		//Close I2C
		I2CClose(I2Ch)
	ENDIF
ENDFUNC 1

FUNCTION GetAlarmTime()
	//Gets the alarm time
	dim AlmSec, AlmMin, AlmHour, AlmDate, AlmMonth
	
	//Open I2C
	rc = I2COpen(I2CSpeed, 0, I2Ch)
	
	//Check alarm status
	rc = I2CReadReg8(RTCAddr, 0x0a, AlmSec)
	rc = I2CReadReg8(RTCAddr, 0x0b, AlmMin)
	rc = I2CReadReg8(RTCAddr, 0x0c, AlmHour)
	rc = I2CReadReg8(RTCAddr, 0x0e, AlmDate)
	rc = I2CReadReg8(RTCAddr, 0x0f, AlmMonth)
	
	//Close I2C
	I2CClose(I2Ch)
ENDFUNC 1

FUNCTION GetAlarmMode()
	//Checks if the alarm is set or unset
	dim AlmEna
	
	//Open I2C
	rc = I2COpen(I2CSpeed, 0, I2Ch)
	
	//Check alarm status
	rc = I2CReadReg8(RTCAddr, 7, AlmEna)
	
	//Close I2C
	I2CClose(I2Ch)
	
	IF ((AlmEna & 16) == 0) THEN
		//Alarm not set
		EXITFUNC 0
	ENDIF
ENDFUNC 1

FUNCTION GetAlarmMatch()
	//Checks if the alarm is set or unset
	dim AlmMat
	
	//Open I2C
	rc = I2COpen(I2CSpeed, 0, I2Ch)
	
	//Check alarm match
	rc = I2CReadReg8(RTCAddr, 0x0d, AlmMat)
	
	//Shift to proper positoin
	AlmMat = (AlmMat >> 4) & 7
	
	//Close I2C
	I2CClose(I2Ch)
	
	//Return data
	EXITFUNC AlmMat
ENDFUNC 1

//Open I2C
rc = I2COpen(I2CSpeed, 0, I2Ch)

//Check time
dim secVal, minVal, hourVal, dayVal, monthVal, yearVal
rc = I2CReadReg8(RTCAddr, 0, secVal)
rc = I2CReadReg8(RTCAddr, 1, minVal)
rc = I2CReadReg8(RTCAddr, 4, dayVal)
rc = I2CReadReg8(RTCAddr, 5, monthVal)
rc = I2CReadReg8(RTCAddr, 6, yearVal)

IF ((secVal & 112) == 0 && (minVal & 112) == 0 && (dayVal & 63) == 1 && (monthVal & 31) == 1 && yearVal == 1) THEN
	//No settings configured! Set time to Monday, 8:15am
	rc = I2CWriteReg8(RTCAddr, 3, 41) //Power and day of week (day 1/Monday)
	rc = I2CWriteReg8(RTCAddr, 1, 16+5) //Minutes
	rc = I2CWriteReg8(RTCAddr, 2, 8) //Hours (24-hour format)

	//Set date to 15/04/2014
	rc = I2CWriteReg8(RTCAddr, 4, 21) //15th
	rc = I2CWriteReg8(RTCAddr, 5, 4) //April
	rc = I2CWriteReg8(RTCAddr, 6, 19) //2014 (2014-2001 = 13)
	
	//Enable RTC
	rc = I2CWriteReg8(RTCAddr, 0, 128)
	
	//Output
	PRINT "RTC not configured, set to 15/04/2014 @ 8:15am.\n"
ENDIF

//Close I2C
I2CClose(I2Ch)

//Start a BLE server
rc = BleGAPSvcInit("CurrentTimeServer", 0, 256, 80000, 100000, 4000000, 0)
AssertRC(rc,47)
rc = BleSvcRegDevInfo("Laird", "BT900", "", "1.0", "1.0", "", "", "")
AssertRC(rc,49)

//Create service
rc = BleServiceNew(BLE_SERVICE_PRIMARY, Service1UUID, Service1)
AssertRC(rc,53)

//Add first characteristics (all read only)
dim hrs$ : hrs$ = ""
rc = BleCharNew(0x12, BleHandleUuid16(0x2A2B), BleAttrMetadata(1,0,10,0,rc), BleAttrMetadata(1,1,2,0,rc),0) //Current time (Read & Notify) with CCCD
assertrc(rc,127)
rc = BleCharCommit(Service1, hrs$, Char1)
assertrc(rc,141)

//Second characteristic
rc = BleCharNew(0x2, BleHandleUuid16(0x2A0F), BleAttrMetadata(1,0,2,0,rc), 0, 0) //Local time (Read)
assertrc(rc,127)
rc = BleCharCommit(Service1, hrs$, Char2)
assertrc(rc,141)

//Third characteristic
rc = BleCharNew(0x2, BleHandleUuid16(0x2A14), BleAttrMetadata(1,0,4,0,rc), 0, 0) //Reference time (Read)
assertrc(rc,127)
rc = BleCharCommit(Service1, hrs$, Char3)
assertrc(rc,141)

//Fourth characteristic
rc = BleCharNew(0x8, BleHandleUuid16(0x2B00), BleAttrMetadata(0,1,10,0,rc), 0, 0) //Update time (Write)
assertrc(rc,127)
rc = BleCharCommit(Service1, hrs$, Char4)
assertrc(rc,141)

//Fifth characteristic
rc = BleCharNew(0xA, BleHandleUuid16(0x2B02), BleAttrMetadata(1,1,2,0,rc), 0, 0) //Alarm mode control [on/off and match] (Read & Write)
assertrc(rc,127)
rc = BleCharCommit(Service1, hrs$, Char5)
assertrc(rc,141)

//Sixth characteristic
rc = BleCharNew(0xA, BleHandleUuid16(0x2B03), BleAttrMetadata(1,1,7,0,rc), 0, 0) //Alarm time control (Read & Write)
assertrc(rc,127)
rc = BleCharCommit(Service1, hrs$, Char6)
assertrc(rc,141)

//Seventh (and final) characteristic
rc = BleCharNew(0x2, BleHandleUuid16(0x2B04), BleAttrMetadata(1,0,3,0,rc), 0, 0) //Version (Read)
assertrc(rc,127)
rc = BleCharCommit(Service1, APP_VERSION$, Char7)
assertrc(rc,141)

//Commit services
rc = BleServiceCommit(Service1)
AssertRC(rc,53)

//Setup local time information characteristic
dim TmpStr$ : TmpStr$ = ""
rc = BleEncode8(TmpStr$, DST, 0) //DST
rc = BleEncode8(TmpStr$, Timezone, 1) //Timezone
	
//Update GATT information
rc = BleCharValueWrite(Char2, TmpStr$)

//Setup reference time information characteristic
TmpStr$ = ""
rc = BleEncode8(TmpStr$, 255, 0) //Hours since update
rc = BleEncode8(TmpStr$, 255, 1) //Days since update
rc = BleEncode8(TmpStr$, 255, 2) //Accuracy is unknown
rc = BleEncode8(TmpStr$, 4, 3) //Source is manual

//Update GATT information
rc = BleCharValueWrite(Char3, TmpStr$)

//Update GATT information for alarm enabled/disabled
TmpStr$ = ""
IF GetAlarmMode() == 1 THEN
	//Alarm enabled
	rc = BleEncode8(TmpStr$, 1, 0)
ELSE
	//Alarm disabled
	rc = BleEncode8(TmpStr$, 0, 0)
ENDIF
rc = BleEncode8(TmpStr$, GetAlarmMatch(), 1)
rc = BleCharValueWrite(Char5, TmpStr$)

//Enable timer to run every seconds
TimerStart(0, 1000, 1)

//Start BLE adverts
dim addr$ : addr$ = ""
rc = BleAdvertStart(0,addr$,500,0,0)
AssertRC(rc,355)

//Run initial time send
rc = HndlrTmr0()

//Add GPIO for RTC alarm
rc = GPIOBindEvent(1, 20, 0)
AssertRC(rc,355)

FUNCTION HndlrAlarm()
	//Runs on RTC alarm wake up, send an advert to alert this
	dim TmpStr$ : TmpStr$ = ""
	rc=BleEncode16(TmpStr$, 0x2B02, 0)

	DIM advRpt$ : advRpt$ = ""
	DIM scRpt$ : scRpt$ = ""
	rc = BleAdvRptInit(advRpt$, 2, 1, 10)
	AssertRC(rc,78)
	rc = BleAdvRptAppendAD(advRpt$, 0x16, TmpStr$)
	AssertRC(rc,80)
	rc = BleAdvRptsCommit(advRpt$, scRpt$)
	AssertRC(rc,82)

	//Open I2C
	rc = I2COpen(I2CSpeed, 0, I2Ch)
	
	//Clear alarm
	dim TmpVal
	rc = I2CReadReg8(RTCAddr, 0x0d, TmpVal)
	TmpVal = (TmpVal&247)
	rc = I2CWriteReg8(RTCAddr, 0x0d, TmpVal)

	//Close I2C
	I2CClose(I2Ch)
	
	//Start the buzzer
	rc = StartBuzzer()
ENDFUNC 1

//Configure buzzer
rc = GpioSetFunc(12, 2, 3)

//Events
ONEVENT EVTMR0 CALL HndlrTmr0 //Runs when timer0 expires
ONEVENT EVTMR1 CALL HndlrTmr1 //Runs when timer1 expires
ONEVENT EVBLEMSG CALL BleEvent //Runs on BLE event
ONEVENT EVCHARCCCD CALL HndlrCharCccd //Runs when CCCD is written
ONEVENT EVCHARVAL CALL HndlrCharVal //Runs when characteristic is written
ONEVENT EVGPIOCHAN1 CALL HndlrAlarm //Runs when the RTC alarm wakes up

WAITEVENT
